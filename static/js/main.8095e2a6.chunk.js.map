{"version":3,"sources":["component/GithubProfileDetails.js","component/GihubProfileCard.js","component/GithubProfile.js","component/GithubRepos.js","component/GithubCredentials.js","component/GithubAPI.js","App.js","reportWebVitals.js","index.js"],"names":["GithubProfileDetails","props","state","this","profile","followers","following","public_repos","public_gists","name","location","email","company","blog","created_at","html_url","className","PureComponent","GihubProfileCard","avatar_url","bio","src","alt","href","target","GithubProfile","Object","keys","length","GithubRepos","repos","map","repo","stargazers_count","watchers_count","clientid","clientsecret","GithubAPI","updateInput","e","setState","username","value","searchUser","preventDefault","searProfile","searRepos","Axios","get","then","response","data","catch","err","console","log","onSubmit","onChange","type","size","placeholder","App","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8095e2a6.chunk.js","sourcesContent":["import React, { PureComponent, Fragment } from 'react'\r\n\r\nclass GithubProfileDetails extends PureComponent {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            \r\n        }\r\n    }\r\n\r\n    render() {\r\n        let {followers, following, public_repos, public_gists,\r\n              name, location, email, company, blog, created_at, html_url} = this.props.profile;\r\n        return (\r\n            <Fragment>\r\n                <div className=\"card\">\r\n                    <div className=\"card-header bg-light\">\r\n                        <span className=\"badge badge-primary mx-2\"> {followers} Followers</span>\r\n                        <span className=\"badge badge-success mx-2\"> {public_repos} Repos</span>\r\n                        <span className=\"badge badge-warning mx-2\"> {public_gists} Gits</span>\r\n                        <span className=\"badge badge-danger mx-2\"> {following} Following</span>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <ul className=\"list-group\">\r\n                            <li className=\"list-group-item\">\r\n                                User Name : {name}\r\n                            </li>\r\n                            <li className=\"list-group-item\">\r\n                                Location : {location}\r\n                            </li>\r\n                            <li className=\"list-group-item\">\r\n                                Email : {email}\r\n                            </li>\r\n                            <li className=\"list-group-item\">\r\n                                Company : {company}\r\n                            </li>\r\n                            <li className=\"list-group-item\">\r\n                                Blog : {blog}\r\n                            </li>\r\n                            <li className=\"list-group-item\">\r\n                                Member Since : {created_at}\r\n                            </li>\r\n                            <li className=\"list-group-item\">\r\n                                Profile URL : {html_url}\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GithubProfileDetails","import React, { PureComponent,Fragment } from 'react'\r\n\r\nclass GihubProfileCard extends PureComponent {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            \r\n        }\r\n    }\r\n\r\n    render() {\r\n        let {name, avatar_url, bio, html_url} = this.props.profile;\r\n        return (\r\n            <Fragment>\r\n                <div className=\"card\">\r\n                    <img src={avatar_url} alt=\"\" className=\"img-fluid\"/>\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\"> {name} </h5>\r\n                        <p> {bio} </p>\r\n                        <a href={html_url} target=\"_blank\" className=\"btn btn-success btn-sm\">Profile</a>\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GihubProfileCard","import React, { PureComponent, Fragment } from 'react';\r\nimport GithubProfileDetails from \"./GithubProfileDetails\";\r\nimport GithubProfileCard from \"./GihubProfileCard\"\r\n\r\nclass GithubProfile extends PureComponent {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            \r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                            {\r\n                                //to check the object is empty\r\n                                Object.keys(this.props).length !== 0 ? \r\n                                <GithubProfileCard profile={this.props.profile}/> : null\r\n                            }\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                             {\r\n                                //to check the object is empty\r\n                                Object.keys(this.props).length !== 0 ? \r\n                                <GithubProfileDetails profile={this.props.profile}/> : null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GithubProfile","import React, { PureComponent, Fragment } from 'react'\r\n\r\nclass GithubRepos extends PureComponent {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            \r\n        }\r\n    }\r\n\r\n    render() {\r\n        // let {} = this.props.repos;\r\n        return (\r\n            <Fragment>\r\n                <div className=\"card\">\r\n                    <div className=\"card-header bg-secondary text-white\">\r\n                        <h3>Github Repos</h3>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <ul className=\"list-group\">\r\n                            {\r\n                                this.props.repos.map((repo) => {\r\n                                    return (\r\n                                        <li className=\"list-group-item\">\r\n                                            <a href={repo.html_url} target=\"_blank\">{repo.name}</a>\r\n                                            <span className=\"badge badge-success mx-5 float-right\"> {repo.stargazers_count} Stars</span>\r\n                                            <span className=\"badge badge-warning mx-5 float-right\"> {repo.watchers_count} Watches</span>\r\n                                        </li>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GithubRepos","export const clientid = '2111ac8da0fcee62bc30';\r\nexport const clientsecret = '6309a2a1f7a395014d56c269cb515e32c736dc40';","import React, { PureComponent, Fragment } from 'react';\r\nimport GithubProfile from \"./GithubProfile\";\r\nimport GithubRepos from \"./GithubRepos\";\r\nimport Axios from \"axios\";\r\nimport { clientid, clientsecret } from './GithubCredentials';\r\n\r\nclass GithubAPI extends PureComponent {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            username : '',\r\n            profile : null,\r\n            repos : null\r\n        }\r\n    }\r\n \r\n    //two way data binding with user name\r\n    updateInput = (e) => {\r\n        this.setState({\r\n            ...this.state,\r\n            username : e.target.value\r\n        });\r\n    };\r\n\r\n    //form submission\r\n    searchUser = (e) =>{\r\n        e.preventDefault();\r\n        this.searProfile();\r\n        this.searRepos();\r\n    };\r\n\r\n    //search a profile\r\n    searProfile = () =>{\r\n        Axios.get(`https://api.github.com/users/${this.state.username} ? clientId=${clientid} & ClientSecret=${clientsecret}`)\r\n        .then((response)=>{\r\n            this.setState({\r\n                profile : response.data\r\n            });\r\n        }).catch((err)=>{\r\n            console.log(err);\r\n        });\r\n    };\r\n\r\n    //search a Repos\r\n    searRepos = () =>{\r\n        Axios.get(`https://api.github.com/users/${this.state.username}/repos?clientId=${clientid}&ClientSecret=${clientsecret}`)\r\n        .then((response)=>{\r\n            this.setState({\r\n                repos : response.data\r\n            });\r\n        }).catch((err)=>{\r\n            console.log(err);\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                {/* <pre>{JSON.stringify(this.state)}</pre> */}\r\n                <div className=\"container mt-3  \">\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header bg-secondary text-white\">\r\n                                    <h3>Github User Search</h3>\r\n                                </div>\r\n                                <div className=\"card-body\">\r\n                                    <form className=\"form-inline\" onSubmit={this.searchUser}>\r\n                                        <div className=\"form-group\">\r\n                                             <input \r\n                                             value={this.state.username}\r\n                                             onChange={this.updateInput}\r\n                                             type=\"text\" \r\n                                             size=\"40\" \r\n                                             className=\"form-control\" \r\n                                             placeholder=\"User Name\"\r\n                                             />\r\n                                        </div>\r\n                                        <div>\r\n                                            <input type=\"submit\" value=\"search\" className=\"btn btn-secondary btn-sm\"/>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"container mt-3\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            {\r\n                                this.state.profile ? \r\n                                <GithubProfile profile={this.state.profile}/> : null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"container mt-3\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            {\r\n                                this.state.repos ? \r\n                                <GithubRepos repos={this.state.repos}/> : null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GithubAPI;","import './App.css';\nimport React from \"react\";\nimport GithubAPI from \"./component/GithubAPI\";\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      \n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <nav className=\"navbar navbar-dark bg-dark\">\n          <a href=\"/\" className=\"navbar-brand\">React With Github User Search (http calls)</a>\n        </nav>\n\n       <GithubAPI />\n       \n\n      </div>\n    )\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}